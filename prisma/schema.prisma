// Config
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialActions"]
}

generator nestgraphql {
    provider = "node node_modules/prisma-nestjs-graphql"
    output   = "../src/generated/prisma-nestjs-graphql"
}

// Tables
model Role {
    id   String @id @default(cuid())
    name String @unique

    scopes          Scope[]
    universityUsers UniversityUser[]
}

model Scope {
    id   String @id @default(cuid())
    name String @unique

    roles Role[]
}

model University {
    id   String  @id @default(cuid())
    name String
    logo String?

    universityUsers UniversityUser[]
    colleges        College[]
    courses         Course[]
    sections        Section[]
    activities      Activity[]
    resources       Resource[]
    assignments     Assignment[]
    quizes          Quiz[]
}

model College {
    id           String @id @default(cuid())
    universityId String
    name         String

    university University @relation(fields: [universityId], references: [id], onDelete: Cascade)

    courses      Course[]
    collegeUsers CollegeUser[]

    @@unique([id, universityId])
    @@unique([universityId, name])
}

model Course {
    id           String @id @default(cuid())
    universityId String
    collegeId    String
    name         String

    university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
    college    College    @relation(fields: [collegeId], references: [id], onDelete: Cascade)

    sections    Section[]
    courseUsers CourseUser[]

    @@unique([id, universityId])
    @@unique([collegeId, name])
}

model Section {
    id           String   @id @default(cuid())
    universityId String
    courseId     String
    name         String
    createdAt    DateTime @default(now())

    university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
    course     Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)

    activities Activity[]

    @@unique([id, universityId])
    @@unique([courseId, name])
}

enum ActivityType {
    RESOURCE
    ASSIGNMENT
    QUIZ
}

model Activity {
    id           String       @id @default(cuid())
    universityId String
    sectionId    String
    type         ActivityType
    createdAt    DateTime     @default(now())
    name         String
    description  String?
    files        String[]

    university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
    section    Section    @relation(fields: [sectionId], references: [id], onDelete: Cascade)

    resources   Resource[]
    assignments Assignment[]
    quizes      Quiz[]

    @@unique([id, universityId])
}

model Resource {
    activityId   String @id
    universityId String

    activity   Activity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
    university University @relation(fields: [universityId], references: [id], onDelete: Cascade)

    @@unique([activityId, universityId])
}

model Assignment {
    activityId   String   @id
    universityId String
    deadline     DateTime
    maxGrade     Float

    activity   Activity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
    university University @relation(fields: [universityId], references: [id], onDelete: Cascade)

    userAssignments UserAssignment[]

    @@unique([activityId, universityId])
}

model Quiz {
    activityId   String @id
    universityId String

    activity   Activity   @relation(fields: [activityId], references: [id], onDelete: Cascade)
    university University @relation(fields: [universityId], references: [id], onDelete: Cascade)

    @@unique([activityId, universityId])
}

model UniversityUser {
    id           String @id @default(cuid())
    universityId String
    userId       String
    roleId       String

    university University @relation(fields: [universityId], references: [id], onDelete: Cascade)
    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    role       Role       @relation(fields: [roleId], references: [id])

    collegeUsers CollegeUser[]

    @@unique([universityId, userId])
}

model CollegeUser {
    id               String @id @default(cuid())
    universityUserId String
    collegeId        String

    universityUser UniversityUser @relation(fields: [universityUserId], references: [id], onDelete: Cascade)
    college        College        @relation(fields: [collegeId], references: [id], onDelete: Cascade)

    courseUsers CourseUser[]

    @@unique([universityUserId, collegeId])
}

model CourseUser {
    id            String @id @default(cuid())
    collegeUserId String
    courseId      String

    collegeUser CollegeUser @relation(fields: [collegeUserId], references: [id], onDelete: Cascade)
    course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)

    @@unique([collegeUserId, courseId])
}

model User {
    id            String  @id @default(cuid())
    firstName     String
    lastName      String
    email         String  @unique
    avatar        String?
    /// First letter of the father's first name
    fatherInitial String  @db.Char(1)
    password      String

    userAssignments UserAssignment[]
    universityUsers UniversityUser[]
}

model UserAssignment {
    id           String   @id @default(cuid())
    userId       String
    assignmentId String
    grade        Float?
    updatedAt    DateTime @updatedAt
    files        String[]

    user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    assignment Assignment @relation(fields: [assignmentId], references: [activityId], onDelete: Cascade)

    @@unique([userId, assignmentId])
}
