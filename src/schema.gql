# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Activity {
  assignments: [Assignment!]
  createdAt: DateTime!
  description: String
  files: [String!]
  id: ID!
  name: String!
  quizes: [Quiz!]
  resources: [Resource!]
  section: Section!
  sectionId: String!
  type: ActivityType!
  university: University!
  universityId: String!
}

enum ActivityType {
  ASSIGNMENT
  QUIZ
  RESOURCE
}

type Assignment {
  activity: Activity!
  activityId: ID!
  deadline: DateTime!
  maxGrade: Float!
  university: University!
  universityId: String!
  userAssignments: [UserAssignment!]
}

type AssignmentObject implements BaseActivityInterface {
  createdAt: DateTime!
  deadline: DateTime!
  description: String
  files: [String!]!
  id: String!
  maxGrade: Float!
  name: String!
  sectionId: String!
  type: String!
  universityId: String!
}

type Authentication {
  accessToken: String!
}

interface BaseActivityInterface {
  createdAt: DateTime!
  description: String
  files: [String!]!
  id: String!
  name: String!
  sectionId: String!
  type: String!
  universityId: String!
}

type College {
  collegeUsers: [CollegeUser!]
  courses: [Course!]
  id: ID!
  name: String!
  university: University!
  universityId: String!
}

type CollegeObject {
  courses: [CourseObject!]!
  id: ID!
  name: String!
  universityId: String!
}

type CollegeUser {
  college: College!
  collegeId: String!
  courseUsers: [CourseUser!]
  id: ID!
  universityUser: UniversityUser!
  universityUserId: String!
}

type Course {
  college: College!
  collegeId: String!
  courseUsers: [CourseUser!]
  id: ID!
  name: String!
  sections: [Section!]
  university: University!
  universityId: String!
}

type CourseObject {
  collegeId: String!
  id: ID!
  name: String!
  universityId: String!
}

type CourseUser {
  collegeUser: CollegeUser!
  collegeUserId: String!
  course: Course!
  courseId: String!
  id: ID!
}

input CreateAnswerInput {
  fraction: Float!
  order: Int!
  text: String!
}

input CreateAssignmentInput {
  deadline: DateTime!
  description: String!
  maxGrade: Float!
  name: String!
  sectionId: String!
}

input CreateCollegeInput {
  name: String!
}

input CreateCourseInput {
  collegeId: String!
  name: String!
}

input CreateQuestionCategoryInput {
  name: String!
}

input CreateQuestionInput {
  answers: [CreateAnswerInput!]!
  name: String!
  text: String!
  type: QuestionType!
}

input CreateQuizInput {
  description: String!
  name: String!
  questions: [CreateQuizQuestionInput!]!
  sectionId: String!
  shuffleAnswers: Boolean!
  shuffleQuestions: Boolean!
  timeClose: DateTime!
  timeLimit: Int!
  timeOpen: DateTime!
}

input CreateQuizQuestionInput {
  maxGrade: Float!
  order: Int!
  questionId: String!
}

input CreateResourceInput {
  description: String!
  name: String!
  sectionId: String!
}

input CreateSectionInput {
  courseId: String!
  name: String!
}

input CreateUniversityInput {
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GroupedByRoleUniversitiesObject {
  role: String!
  universities: [UniversityObject!]!
}

input LoginUserInput {
  email: String!
  password: String!
}

type Mutation {
  createAssignment(data: CreateAssignmentInput!, files: [Upload!]!): AssignmentObject!
  createCollege(data: CreateCollegeInput!): CollegeObject!
  createCourse(data: CreateCourseInput!): CourseObject!
  createQuestion(data: CreateQuestionInput!, questionCategoryId: String!): QuestionObject!
  createQuestionCategory(data: CreateQuestionCategoryInput!): QuestionCategoryObject!
  createQuiz(data: CreateQuizInput!, files: [Upload!]!): QuizObject!
  createQuizAttempt(quizId: String!): UserQuizObject!
  createResource(data: CreateResourceInput!, files: [Upload!]!): ResourceObject!
  createSection(data: CreateSectionInput!): SectionObject!
  createUniversity(data: CreateUniversityInput!, logo: Upload): UniversityObject!
  deleteActivity(id: String!, type: ActivityType!): BaseActivityInterface!
  deleteCollege(id: String!): CollegeObject!
  deleteCourse(id: String!): CourseObject!
  deleteQuestion(id: String!): QuestionObject!
  deleteQuestionCategory(id: String!): QuestionCategoryObject!
  deleteSection(id: String!): SectionObject!
  deleteUniversity(id: String!): UniversityObject!
  leaveUniversity(id: String!): UniversityObject!
  login(user: LoginUserInput!): Authentication!
  logout: Authentication
  refreshTokens: Authentication!
  register(avatar: Upload, user: RegisterUserInput!): Authentication!
  updateAssignment(data: UpdateAssignmentInput!, id: String!, newFiles: [Upload!]!): AssignmentObject!
  updateCollege(data: CreateCollegeInput!, id: String!): CollegeObject!
  updateCourse(data: CreateCourseInput!, id: String!): CourseObject!
  updateMyAssignment(data: UpdateMyAssignmentInput!, id: String!, newFiles: [Upload!]!): UserAssignmentObject!
  updateQuestion(data: UpdateQuestionInput!, id: String!): QuestionObject!
  updateQuestionCategory(data: UpdateQuestionCategoryInput!, id: String!): QuestionCategoryObject!
  updateQuiz(data: UpdateQuizInput!, id: String!, newFiles: [Upload!]!): QuizObject!
  updateResource(data: UpdateResourceInput!, id: String!, newFiles: [Upload!]!): ResourceObject!
  updateSection(data: CreateSectionInput!, id: String!): SectionObject!
  updateUniversity(data: CreateUniversityInput!, id: String!, logo: Upload): UniversityObject!
  updateUserAssignment(data: UpdateUserAssignmentInput!, id: String!): UserAssignmentObject!
}

type Query {
  activity(id: String!): BaseActivityInterface!
  colleges(universityId: String!): [CollegeObject!]!
  me: UserObject!
  myAssignment(id: String!): UserAssignmentObject
  myQuiz(quizId: String!): UserQuizObject
  questionBank: [QuestionCategoryObject!]!
  sections(courseId: String!): [SectionObject!]!
  userAssignment(id: String!): UserAssignmentObject
  userAssignments(assignmentId: String!): [UserAssignmentObject!]!
  userQuizAttempt(quizId: String!, userId: String!): UserQuizObject!
  userQuizAttempts(quizId: String!): [UserQuizObject!]!
}

type Question {
  createdAt: DateTime!
  id: ID!
  name: String!
  questionAnswers: [QuestionAnswer!]
  questionCategory: QuestionCategory!
  questionCategoryId: String!
  quizQuestions: [QuizQuestion!]
  text: String!
  type: QuestionType!
}

type QuestionAnswer {
  fraction: Float!
  id: ID!
  order: Int!
  question: Question!
  questionId: String!
  text: String!
  userQuestionAnswers: [UserQuestionAnswer!]
}

type QuestionAnswerObject {
  fraction: Float!
  id: ID!
  order: Int!
  text: String!
}

type QuestionCategory {
  id: ID!
  name: String!
  questions: [Question!]
  universityUser: UniversityUser!
  universityUserId: String!
}

type QuestionCategoryObject {
  id: ID!
  name: String!
  questions: [QuestionObject!]!
}

type QuestionObject {
  answers: [QuestionAnswerObject!]!
  id: ID!
  name: String!
  text: String!
  type: QuestionType!
}

enum QuestionType {
  MULTIPLE_CHOICE
  SINGLE_CHOICE
}

type Quiz {
  activity: Activity!
  activityId: ID!
  quizQuestions: [QuizQuestion!]
  shuffleAnswers: Boolean!
  shuffleQuestions: Boolean!
  timeClose: DateTime!
  timeLimit: Int!
  timeOpen: DateTime!
  university: University!
  universityId: String!
  userQuizes: [UserQuiz!]
  visible: Boolean!
}

type QuizObject implements BaseActivityInterface {
  createdAt: DateTime!
  description: String
  files: [String!]!
  id: String!
  name: String!
  quizQuestions: [QuizQuestionObject!]!
  sectionId: String!
  shuffleAnswers: Boolean!
  shuffleQuestions: Boolean!
  timeClose: DateTime!
  timeLimit: Int!
  timeOpen: DateTime!
  type: String!
  universityId: String!
  visible: Boolean!
}

type QuizQuestion {
  id: ID!
  maxGrade: Float!
  order: Int!
  question: Question!
  questionId: String!
  quiz: Quiz!
  quizId: String!
  userQuizQuestions: [UserQuizQuestion!]
}

type QuizQuestionObject {
  id: ID!
  maxGrade: Float!
  order: Int!
  question: QuestionObject!
  questionId: String!
  quizId: String!
}

input RegisterUserInput {
  email: String!
  fatherInitial: String!
  firstName: String!
  lastName: String!
  password: String!
}

type Resource {
  activity: Activity!
  activityId: ID!
  university: University!
  universityId: String!
}

type ResourceObject implements BaseActivityInterface {
  createdAt: DateTime!
  description: String
  files: [String!]!
  id: String!
  name: String!
  sectionId: String!
  type: String!
  universityId: String!
}

type Role {
  id: ID!
  name: String!
  scopes: [Scope!]
  universityUsers: [UniversityUser!]
}

type Scope {
  id: ID!
  name: String!
  roles: [Role!]
}

type Section {
  activities: [Activity!]
  course: Course!
  courseId: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  university: University!
  universityId: String!
}

type SectionObject {
  activities: [BaseActivityInterface!]!
  courseId: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  universityId: String!
}

type University {
  activities: [Activity!]
  assignments: [Assignment!]
  colleges: [College!]
  courses: [Course!]
  id: ID!
  logo: String
  name: String!
  quizes: [Quiz!]
  resources: [Resource!]
  sections: [Section!]
  universityUsers: [UniversityUser!]
}

type UniversityObject {
  id: ID!
  logo: String
  name: String!
}

type UniversityUser {
  collegeUsers: [CollegeUser!]
  id: ID!
  questionCategories: [QuestionCategory!]
  role: Role!
  roleId: String!
  university: University!
  universityId: String!
  user: User!
  userId: String!
}

input UpdateAnswerInput {
  fraction: Float!
  order: Int!
  text: String!
}

input UpdateAssignmentInput {
  deadline: DateTime!
  description: String!
  filesToDelete: [String!]!
  maxGrade: Float!
  name: String!
  oldFiles: [String!]!
  sectionId: String!
}

input UpdateMyAssignmentInput {
  filesToDelete: [String!]!
  oldFiles: [String!]!
}

input UpdateQuestionCategoryInput {
  name: String!
}

input UpdateQuestionInput {
  answers: [UpdateAnswerInput!]!
  name: String!
  text: String!
  type: QuestionType!
}

input UpdateQuizInput {
  description: String!
  filesToDelete: [String!]!
  name: String!
  oldFiles: [String!]!
  questions: [CreateQuizQuestionInput!]!
  sectionId: String!
  shuffleAnswers: Boolean!
  shuffleQuestions: Boolean!
  timeClose: DateTime!
  timeLimit: Int!
  timeOpen: DateTime!
}

input UpdateResourceInput {
  description: String!
  filesToDelete: [String!]!
  name: String!
  oldFiles: [String!]!
  sectionId: String!
}

input UpdateUserAssignmentInput {
  grade: Float
  updatedAt: DateTime!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String
  email: String!

  """First letter of the father's first name"""
  fatherInitial: String!
  firstName: String!
  id: ID!
  lastName: String!
  password: String!
  universityUsers: [UniversityUser!]
  userAssignments: [UserAssignment!]
  userQuizes: [UserQuiz!]
}

type UserAssignment {
  assignment: Assignment!
  assignmentId: String!
  files: [String!]
  grade: Float
  id: ID!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type UserAssignmentObject {
  assignmentId: String!
  files: [String!]
  grade: Float
  id: ID!
  updatedAt: DateTime!
  user: UserObject!
  userId: String!
}

type UserObject {
  avatar: String
  email: String!

  """First letter of the father's first name"""
  fatherInitial: String!
  firstName: String!
  groupedByRoleUniversities: [GroupedByRoleUniversitiesObject!]!
  id: ID!
  lastName: String!
}

type UserQuestionAnswer {
  id: ID!
  questionAnswer: QuestionAnswer!
  questionAnswerId: String!
  userQuizQuestion: UserQuizQuestion!
  userQuizQuestionId: String!
}

type UserQuestionAnswerObject {
  id: ID!
  questionAnswerId: String!
  userQuizQuestionId: String!
}

type UserQuiz {
  id: ID!
  quiz: Quiz!
  quizId: String!
  timeFinish: DateTime
  timeStart: DateTime!
  user: User!
  userId: String!
  userQuizQuestions: [UserQuizQuestion!]
}

type UserQuizObject {
  id: ID!
  questions: [UserQuizQuestionObject!]!
  quizId: String!
  timeFinish: DateTime
  timeStart: DateTime!
  user: UserObject!
  userId: String!
}

type UserQuizQuestion {
  grade: Float
  id: ID!
  quizQuestion: QuizQuestion!
  quizQuestionId: String!
  userQuestionAnswers: [UserQuestionAnswer!]
  userQuiz: UserQuiz!
  userQuizId: String!
}

type UserQuizQuestionObject {
  grade: Float
  id: ID!
  pickedAnswers: [UserQuestionAnswerObject!]!
  question: QuestionObject!
  quizQuestionId: String!
  userQuizId: String!
}
